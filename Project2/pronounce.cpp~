//
/*
  Name: Asllan Alija
  Course: CSCI 135
  Instructor: Genady Maryash
  Assignment: Project2: Phase 1


  Takes in a word from the user and prints the pronounciation of the word.
 */

#include <iostream>
#include <string>
#include <fstream>
#include <cstdlib>
#include <climits>

using std::string;


// to uppercase function so checking if input = dictionary word is easier.
void toUpper(string &str)
{
    for (int i = 0; i < str.length(); i++)
    {
        if (str[i] >= 97 && str[i] <= 122)
            str[i] -= 32;
    }
}

int countSpaces(string str)
{
    int count = 0;

    for (int i = 0; i < str.length(); i++)
        if (isspace(str[i]))
            count++;
    return count + 1;
}

void splitOnSpace(string s, string & before, string & after) {
  // reset strings
    before = "";
    after = "";
  // accumulate before space
    int i = 0;
    while (i < s.size() && not isspace(s[i])) {
        before = before + s[i];
        i++;
    }
  // skip the space
    i += 2;
    // accumulate after space
    while (i < s.size()) {
        after = after + s[i];
        i++;
    }
}

string getPronounciation(string word)
{
    std::ifstream fin("cmudict.0.7a");
    string str = "";
    string dicword = "";
    string pron = "";
    string wordpron = "";
    string ret = "";
    while (std::getline(fin, str))
    {
        // if the line is not a comment, perform the check.
        if (!(str.find(";;;") < str.length()))
        {
            splitOnSpace(str, dicword, pron);
            if (word == dicword)
            {
                wordpron = pron;
            }
        }
    }
    return wordpron;
}

string* splitSpaceArray(string word)
{
    string* arrptr = new string[19];
    int idx = 0;
    int lastidx = -1;
    int currlen = 0;
    for (int i = 0; i < word.length(); i++)
    {
        if (word[i] == ' ')
        {
            arrptr[idx] = word.substr(lastidx + 1, currlen);
            lastidx = i;
            idx++;
            currlen = 0;
        }
        currlen++;
    }
    arrptr[idx] =  word.substr(lastidx + 1, currlen);
    return arrptr;
}

bool checkReplace(string pron1, string pron2)
{
    int len = countSpaces(pron1);
    int count = 0;
    if (len == countSpaces(pron2))
    {
        string* w1 = splitSpaceArray(pron1);
        string* w2 = splitSpaceArray(pron2);
        for (int i = 0; i < len + 1; i++)
        {
            if (*w1 == *w2)
                count++;
            w1++;
            w2++;
        }
        return count == len;
    }
    else
        return false;
}

bool checkIdentical(string pron1, string pron2)
{
    return pron1 == pron2;
}
int smaller(int a, int b)
{
    if (a < b)
        return a;
    return b;
}
bool checkAdd(string pron1, string pron2)
{
    int len1 = countSpaces(pron1);
    int len2 = countSpaces(pron2);
    int count = 0;
    int epsilon = 0;
    //std::cout << pron1 << " " << pron2 << " " << len2 << '\n';
    if (len1 == len2 + 1)
    {
        string * w1 = splitSpaceArray(pron1);
        string * w2 = splitSpaceArray(pron2);
        for (int i = 0; i < len2; i++)
        {
            if (*w1 != *w2)
            {
                epsilon = epsilon + 1;
                if (epsilon > 1)
                {
                    std::cout << len2 << " " << epsilon << " " << pron1 << " " << pron2 << '\n';
                    return false;
                }
                w1++;
                i--;
            }
            else
            {
                count++;
                w1++;
                w2++;
            }
        }
        if (count == len2)
        {
            std::cout << count << " " << len2 << " " << pron1 << '\n';
            return true;
        }
        else
        {
            std::cout << count << " " << len2 << " " << pron1 << '\n';
        }
    }
    return false;
}
int main()
{
    string word = "";
    std::cin >> word;
    toUpper(word);
    string wordpron = getPronounciation(word);
    string str = "";
    string dicword = "";
    string pron = "";
    string* replace = new string[100];
    string* identical = new string[100];
    string* add = new string[100];
    int addlength = 0;
    int replength = 0;
    int idlength = 0;
    std::ifstream fin("cmudict.0.7a");


    bool found = false;
    if (getPronounciation(word) != "")
        found = true;
    if (!found)
        std::cout << "Not found";
    else
    {
        while(std::getline(fin,str))
        {
            //std::cout << str << '\n';
            if (str[0] > 64 && str[0] < 123)
            {
                splitOnSpace(str, dicword, pron);
                if (checkReplace(pron, wordpron))
                {
                    replace[replength] = dicword;
                    replength = replength + 1;
                }
                if (checkIdentical(pron, wordpron) && dicword != word)
                {
                    identical[idlength] = dicword;
                    idlength = idlength + 1;
                }
                if (checkAdd(pron, wordpron))
                {
                    add[addlength] = dicword;
                    addlength = addlength + 1;
                }
            }
        }
        std::cout << "Pronounciation    : " << wordpron << "\n";
        std::cout << "Identical        : ";
        for (int i = 0; i < idlength; i++)
        {
            std::cout << *identical << " ";
            identical++;
        }
        std::cout << "\nReplace phoneme  : ";
        for (int i = 0; i < replength; i++)
        {
            std::cout << *replace << " ";
            replace++;
        }
        std::cout << "\nAdd phoneme      : ";
        for (int i = 0; i < addlength; i++)
        {
            std::cout << *add << " ";
            add++;
        }
        std::cout << "\n";
    }
}




